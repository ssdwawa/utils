1.react写搜索
  input 用e.target.value 别用ref
  settimeout这样写：
    searchName (v) {
        let value = v.target.value
        setTimeout(() => {
            console.log(value)
        }, 500);
    }


2.时间转换
`${new Date(v.createdTime).getFullYear()}/${new Date(v.createdTime).getMonth()+1}/${new Date(v.createdTime).getDate()}`
同时有
  date.getFullYear();  // 获取完整的年份(4位,1970)
  date.getMonth();  // 获取月份(0-11,0代表1月,用的时候记得加上1)
  date.getDate();  // 获取日(1-31)
  date.getTime();  // 获取时间(从1970.1.1开始的毫秒数)
  date.getHours();  // 获取小时数(0-23)
  date.getMinutes();  // 获取分钟数(0-59)
  date.getSeconds();  // 获取秒数(0-59)


3.正则王
const regex = /.*?@.*?\.com$|\.cn$|\.org$|\.net$/;
regex.test( this.refs.mail.value)



4. react 神坑ref
获取值insight:this.summary.textAreaRef.value
得到值ref={el => this.summary = el}

5. antd table
<Table dataSource={this.state.userData} columns={columns} onRowClick={(v) => { this.choiceUser(v) }} pagination={this.state.pagination} onChange={(v) => this.handleTableChange(v)} />
  handleTableChange(v) {
        if(v.current!==this.state.pagination.current){
            ajax.get(`${apiConfig.getUserList}?page=${v.current}`).then((res) => {
                const userData=this.changeData(res.data.data.users);
                const pagination = this.state.pagination;
                pagination.current = v.current;
                this.setState({
                    userData: userData,
                    pagination: pagination
                });
            })
        }
        
    }

6.router4-antd
  <TabBar
      unselectedTintColor="#949494"
      tintColor="#33A3F4"
      barTintColor="white"
      hidden={this.state.hidden}
  >
      <TabBar.Item
          title="Assets"
          key="assets"
          icon={
              <i className='iconfont icon-assets'></i>
          }
          selectedIcon={
              <i className='iconfont icon-assets'></i>
          }
          selected={this.state.selectedTab === 'assets' || !this.state.selectedTab || this.state.selectedTab === 'assetsDetail' }
          onPress={() => {
              this.setState({
                  selectedTab: 'assets'
              });
              this.jumpTo('/assets');
          }}
      >
          <Route exact path='/' component={Assets}/>
          <Route exact path='/assets' component={Assets}/>
          <Route exact path='/assets/:level' component={AssetsList}/>
          <Route exact path='/allFunds/:id' component={AllFunds}/>
          <Route exact path='/assetsDetail/:id' component={AssetsDetail}/>

      </TabBar.Item>
      <TabBar.Item
          icon={
              <i className='iconfont icon-upcoming'></i>
          }
          selectedIcon={
              <i className='iconfont icon-upcoming'></i>
          }
          title="Upcoming"
          key="upcoming"
          selected={this.state.selectedTab === 'upcoming'}
          onPress={() => {
              this.setState({
                  selectedTab: 'upcoming'
              });
              this.jumpTo('/upcoming');
          }}
      >
          <Route path='/upcoming' component={Upcoming}/>
      </TabBar.Item>
      <TabBar.Item
          icon={
              <i className='iconfont icon-alerts'></i>
          }
          selectedIcon={ 
              <i className='iconfont icon-alerts'></i>
          }
          title="Alerts"
          key="alerts"
          selected={this.state.selectedTab === 'alerts' || this.state.selectedTab === 'alertDetail'}
          onPress={() => {
              this.setState({
                  selectedTab: 'alerts'
              });
              this.jumpTo('/alerts');
          }}
      >
          <Route path='/alerts' component={Alerts}/>
          {/* <Route exact path='/alertDetail/:alertId' component={AlertDetail}/> */}
      </TabBar.Item>
      <TabBar.Item
          icon={
              <i className='iconfont icon-task'></i>
          }
          selectedIcon={
              <i className='iconfont icon-task'></i>
          }
          title="Tasks"
          key="tasks"
          selected={this.state.selectedTab === 'tasks' || this.state.selectedTab === 'tasksDetail' || this.state.selectedTab === 'newTask'}
          onPress={() => {
              this.setState({
                  selectedTab: 'tasks'
              });
              this.jumpTo('/tasks');
          }}
      >
          <Route path='/tasks/:type?' component={Tasks}/>
          <Route exact path='/assetsDetail/:id' component={AssetsDetail}/>
          {/* <Route exact path='/alertDetail/:alertId' component={AlertDetail}/> */}
      </TabBar.Item>
      {/* <TabBar.Item
          icon={
              <i className='iconfont icon-search'></i>
          }
          selectedIcon={
              <i className='iconfont icon-search'></i>
          }
          title="Search"
          key="search"
          selected={this.state.selectedTab === 'search'}
          onPress={() => {
              this.setState({
                  selectedTab: 'search'
              });
              this.jumpTo('/search');
          }}
      >
          <Route path='/search' component={Search}/>
      </TabBar.Item> */}
  </TabBar>

7.图片大小自适应
  img{
      width: 100%;
      height: 36.15vw;
  }

8.li:before{
    content:'';
    display: inline-block;
    width: .65rem;
    height: .65rem;
    border-radius: 50%;
    background-color: #000;
    margin-right: 0.7rem;
}
li:hover::before{
    background-color: rgb(255, 117, 51);
}
