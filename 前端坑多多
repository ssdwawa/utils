1.react写搜索
  input 用e.target.value 别用ref
  settimeout这样写：
    searchName (v) {
        let value = v.target.value
        setTimeout(() => {
            console.log(value)
        }, 500);
    }


2.时间转换
`${new Date(v.createdTime).getFullYear()}/${new Date(v.createdTime).getMonth()+1}/${new Date(v.createdTime).getDate()}`
同时有
  date.getFullYear();  // 获取完整的年份(4位,1970)
  date.getMonth();  // 获取月份(0-11,0代表1月,用的时候记得加上1)
  date.getDate();  // 获取日(1-31)
  date.getTime();  // 获取时间(从1970.1.1开始的毫秒数)
  date.getHours();  // 获取小时数(0-23)
  date.getMinutes();  // 获取分钟数(0-59)
  date.getSeconds();  // 获取秒数(0-59)


3.正则王
const regex = /.*?@.*?\.com$|\.cn$|\.org$|\.net$/;
regex.test( this.refs.mail.value)



4. react 神坑ref
获取值insight:this.summary.textAreaRef.value
得到值ref={el => this.summary = el}

5. antd table
<Table dataSource={this.state.userData} columns={columns} onRowClick={(v) => { this.choiceUser(v) }} pagination={this.state.pagination} onChange={(v) => this.handleTableChange(v)} />
  handleTableChange(v) {
        if(v.current!==this.state.pagination.current){
            ajax.get(`${apiConfig.getUserList}?page=${v.current}`).then((res) => {
                const userData=this.changeData(res.data.data.users);
                const pagination = this.state.pagination;
                pagination.current = v.current;
                this.setState({
                    userData: userData,
                    pagination: pagination
                });
            })
        }
        
    }

7.图片大小自适应
  img{
      width: 100%;
      height: 36.15vw;
  }

8.li:before{
    content:'';
    display: inline-block;
    width: .65rem;
    height: .65rem;
    border-radius: 50%;
    background-color: #000;
    margin-right: 0.7rem;
}
li:hover::before{
    background-color: rgb(255, 117, 51);
}
9.react 滚动条触发修改样式
handleScroll(e){
		let scrollTop = e.srcElement.body.scrollTop;
		const line1=document.getElementsByClassName('line1')[0]
		if(scrollTop<200 &&scrollTop>=1){
			let he = 400-scrollTop;
			let fs = 50-(scrollTop/10);
			let ml= scrollTop*100/300;
			let op = 1-scrollTop/150;
			setTimeout(() =>{
				this.refs.lineo.style.height=`${he}px`;
				if(scrollTop>0){
					this.refs.lineo.style.fontSize=`${fs}px`;
					this.refs.ao.style.marginLeft=`${ml}%`;
					this.refs.ao.style.opacity=`${op}`;
				}

			}, 200);
		}
	}
	
10.react父组件向子组件传方法
父组件中
<ControlButton cancel={(v)=>this.cancelButtonList(v)} buttons={buttonList} />
其中buttonList为
const buttonList =taskType?[
    {name:'Add Comment',click: this.AddComment,css:'button-top'},
    {name:'New Task',click: this.NewTask,css:'button-bottom'}
]:[
    {name:'Add Comment',click: this.AddComment,css:'button-top'},
    {name:'Edit',click: this.Edit,css:null},
    {name:'Close the task',click: this.CloseTheTask,css:null},
    {name:'New Task',click: this.NewTask,css:'button-bottom'}
]

子组件中
{this.props.buttons.map((v,i)=>(
 <div key={i} className={`button-item ${v.css}`} onClick={()=>v.click()}>
    {v.name}
</div>
))}

11.react hover
onMouseOver={this.changeHover}
onMouseOut={this.changeHover}

changeHover = () => {
    this.setState(
      prevState => ({ hover: !prevState.hover })
    )
  }

12.图片的伸缩
实现图片两边的可舍弃但是高度不能舍弃
图片外面包一层定好min-height
.wrap{
  min-height:500px;
  img{
   .....
  }
}

13.react子向父传参
  子：
  hideMap=()=>{
     this.props.hideMap(false)
  }
   
   父：
   <子 hideMap={(data)=>this.hideMap(data)}/>
    hideMap = async (data) =>{
        await this.setState({
            toTop: data
        })
        setTimeout(() => {
            this.setState({
                showMap: data
            })
        }, 1000);
    }
   
14.浏览器离开事件
 window.onbeforeunload = function (e) {
    e = e || window.event;

    if (e) {
	debugger
	localStorage.setItem('testz', 'test2')
    }
};

15.ract路由传参
https://www.jianshu.com/p/8cf549616f86

16.禁止事件
window.addEventListener("keydown", (e) => {
    e = window.event || e;
    if (event.keyCode == 116 || e.ctrlKey   &&   e.keyCode==82) {
	e.preventDefault()
	return false;
    }
});

// document.oncontextmenu = function(){ return false;}

17.篡改localStorage使之可以监听同页面下的Storage变化
	var orignalSetItem = localStorage.setItem;
	localStorage.setItem = function (key, newValue) {
	    var setItemEvent = new Event("setItemEvent");
	    setItemEvent.key = key;
	    setItemEvent.newValue = newValue;
	    window.dispatchEvent(setItemEvent);
	    orignalSetItem.apply(this, arguments);
	}
	window.addEventListener("setItemEvent", (e) => {
	    if (e.key == 'auth') {
		console.log(e)
		this.setState({
		    auth: e.newValue
		})
	    }
	});
18.图片预加载
let imgArr = [
	    '../../images/Thought Leadership/Asset 1.png', '../../images/Thought Leadership/Asset 2.png',
	    '../../images/Thought Leadership/Asset 3.png','../../images/Thought Leadership/Asset 4.png',
	    '../../images/Thought Leadership/Asset 5.png','../../images/Thought Leadership/Asset 6.png',
	    '../../images/Thought Leadership/Asset 7.png','../../images/Thought Leadership/Asset 8.png'
	]
	let imgwrap=[]
	for (var i = 0; i<imgArr.length ; i++){
	    imgwrap[i] = new Image()
	    let src =  require('../../images/Thought Leadership/Asset ' + (i + 1) + '.png')
	    imgwrap[i].src = src
	}
19.得到css中的transform:
 var wd =  $('.rotator').css('transform').split(',')[4]
 
 
20.操作视频
this.video.pause()
        let intervalRwd = setInterval(()=>(this.video.currentTime -= .03), 30);

21.postmesshe
	window.parent.postMessage(JSON.stringify('/DataGx'), "*")

	window.onmessage = (e)=>{
            let data =JSON.parse(e.data)
            history.push(data)
        }
22.背景图片
    width: 100vw;
    height: 92vh;
    background: url('../../images/HZ/Home_bg2.png') no-repeat center center ;
    background-size: cover;
23.当react组件需要react url的参数
    import { withLastLocation } from 'react-router-last-location';
    export default withLastLocation(ChallengeSolutionResult)

24.qq浏览器软键盘问题
	if ((/Android/gi).test(navigator.userAgent)) {
        var winHeight = $(window).height(); //获取当前页面高度
        $(window).resize(function () {
            var thisHeight = $(this).height();
            if (winHeight - thisHeight > 50) {
                $('.wrap').css('transform', 'translate(0,-150px)');
            } else {
                $('.wrap').css('transform', 'translate(0,0)');
            }
        });
    }

25.获得url参数
function getQueryVariable(variable) {
    var query = window.location.search.substring(1);
    var vars = query.split("&");
    for (var i = 0; i < vars.length; i++) {
        var pair = vars[i].split("=");
        if (pair[0] == variable) { return pair[1]; }
    }
    return (false);
}

26.localstorage的读写
	localStorage.setItem('userInfo',JSON.stringify(userInfo))
	var cacheUser = JSON.parse(localStorage.getItem('userInfo'));
27. map用法
	const tmpl = addrs => `
	  <table>
	  ${addrs.map(addr => `
	    <tr><td>${addr.first}</td></tr>
	    <tr><td>${addr.last}</td></tr>
	  `).join('')}
	  </table>

28.react 路由技巧
	 this.props.match.path.replace(/\:stage\?/, 1)可以改变路由状态，并且触发render
	 在render()里面可以 match.params获得改变的参数
	 
29.ANTD 日期这么玩
      某几天可用
	 const dates = ['2018-11-10', '2018-11-12', '2018-11-20']
	 disabledDate={(current) => !dates.includes(moment(current).format('YYYY-MM-DD'))}
      范围不可用
      	 disabledDate={(current) => (current && current < moment('2018-10-26').startOf('day') || current && current > moment('2018-10-26').endOf('day'))}
	 
30.react-mobx 渲染jsx
	 const leadingRootCauseUI = leadingRootCause && leadingRootCause.data.map(v => {
	    let element = null;
	    if( v.Trend == -1 ){
		element = <Icon type='down' style={{ color: 'red' }} />
	    }else if( v.Trend == 1 ){
		element = <Icon type='up' style={{ color: 'green' }} />;
	    }
	    return  {
		...v,
		Trend: element
	    };
	})
31.避免重复render

    shouldComponentUpdate(nextProps, nextState) {
        return (nextProps.flag !== this.props.flag);
    }
    
32.HighChart 操作数据
 plotOptions: {
    series: {
      animation: false
    },
    bar: {
      dataLabels: {
	enabled: true,
	formatter: function () {
	  var pcnt = (this.y /  nextProps.graphData.sum) * 100;
	  return `${this.y}  (${Highcharts.numberFormat(pcnt)}%)`;
	}
      },
      enableMouseTracking: false,
    },
  },

33.table 竖着来
table tr {
	display: table-cell;
}
table tr td {
	display: block;
}

table 占多行
<table className="table">
    <thead>
	<tr>
	    <th>时间</th>
	    <th>收支金额</th>
	</tr>
    </thead>

    {mockData.leftData.map((rowdata: any[]) => {
	return (
	    <tbody>
		<tr>
		    <td rowSpan={rowdata[1].length}>
			{rowdata[0]}
		    </td>
		    <td className="to-right">
			{rowdata[1][0]}
		    </td>

		</tr>
		{rowdata[1].length > 1 && rowdata[1].map((v: any[], index: number) => (
		    (index != 0 && <tr className="to-right">
			<td>
			    {v}
			</td>
		    </tr>)
		))}
	    </tbody>
	)
    })}
</table>


34.滚动条不纠结
 window.scrollTo(0, 0);
 
 35.对象操作
    动态设置对象名
    selectData (type , value){
 	const name = type
        let params={
            [name]:value
        }
    }
    
    拿对象的值
     <span>{Object.keys(v)[0]}</span>
     <span>{Object.values(v)[0]}</span>
    
36.env
 NODE_PATH=src/

37.sort
res.data.sort(function(a,b){
        var order = ["OKRI", "Key Risk Analysis and Trending", "Financial Reporting", "Global Process Delivery", "Regulatory and Tex Service",'Global Product Delivery',"Headcount", "Turnover&Overtime"];
	return order.indexOf(a.name) - order.indexOf(b.name);
})

38.对象的深度合并

function deepMerge(obj1, obj2) {
    var key;
    for(key in obj2) {
        // 如果target(也就是obj1[key])存在，且是对象的话再去调用deepMerge，否则就是obj1[key]里面没这个对象，需要与obj2[key]合并
        obj1[key] = obj1[key] && obj1[key].toString() === "[object Object]" ?
        deepMerge(obj1[key], obj2[key]) : obj1[key] = obj2[key];
    }
    return obj1;
}

39.js移动物体
	//获取元素
var dv = document.getElementById('dv');
var x = 0;
var y = 0;
var l = 0;
var t = 0;
var isDown = false;
//鼠标按下事件
dv.onmousedown = function(e) {
    //获取x坐标和y坐标
    x = e.clientX;
    y = e.clientY;

    //获取左部和顶部的偏移量
    l = dv.offsetLeft;
    t = dv.offsetTop;
    //开关打开
    isDown = true;
    //设置样式  
    dv.style.cursor = 'move';
}
//鼠标移动
window.onmousemove = function(e) {
    if (isDown == false) {
        return;
    }
    //获取x和y
    var nx = e.clientX;
    var ny = e.clientY;
    //计算移动后的左偏移量和顶部的偏移量
    var nl = nx - (x - l);
    var nt = ny - (y - t);

    dv.style.left = nl + 'px';
    dv.style.top = nt + 'px';
}
//鼠标抬起事件
dv.onmouseup = function() {
    //开关关闭
    isDown = false;
    dv.style.cursor = 'default';
}

40.js 读取对象

var json = {颜色: "1708480395608103", 蓝色: "1708742016288631"};
var keyArr = Object.keys(json);
var val = json[keyArr[0]];

41.数组接近
	arr.sort(function(a, b) {
	  return Math.abs(a - N) - Math.abs(b - N);
	})[0];
	
42.hover防抖
	hover出现的元素.style('pointer-events', 'none')
	
43.金融三分位
	toLocalstring()
44.时间戳防抖
 let lastTime = '';

  function searchFun(value) {
    lastTime = new Date().getTime();
    setTimeout(function() {
      if (new Date().getTime() - lastTime >= 1000) {
        Step2Control.searchInput(value);
      }
    }, 1000);
  }
45.遍历字典对象
   Object.entries(WorkFlowDrawStore.itemParam[WorkFlowDrawStore.choiceType]).map(([paramKey, paramValue], index: number) => (
		    console.log(paramValue)
		))
		
46.数组删数组
	// If I have this array:
    var myArray = ['a', 'b', 'c', 'd', 'e', 'f', 'g'];

    // and this one:
    var toRemove = ['b', 'c', 'g'];

    myArray = myArray.filter(function(el) {
      return !toRemove.includes(el);
    });
    
    高速版
    const toRemoveMap = toRemove.reduce(
      function(memo, item) {
        memo[item] = memo[item] || true;
        return memo;
      },
      {} // initialize an empty object
    );

    const filteredArray = myArray.filter(function(x) {
      return !toRemoveMap[x];
    });

47.插入一段结构
var fragment = document.createDocumentFragment()
for(let i = 0; i < 1000; i++){
	let li = document.createElement('li')
	li.innerHTML = '我是li标签'
    fragment.appendChild(li)
}
root.appendChild(fragment);
 
48.找位置
 let domIndex = 0;
	while ((child = child.previousSibling) != null)
    domIndex++;
49. 策略模式
const type = this.options.series[0].type;
this.chartInstance = new chartsType[type](
	this.id,
	this.options,
	this.dataView
);
    
const chartsType: { [index: string]: any } = {
    basicBar: BasicBar,
    basicLine: BasicLine,
    scatter: BasicScatter,
    basicArea: BasicArea,
    groupBar:GroupBar
};    
50.字体引入不加引号
