1.react写搜索
  input 用e.target.value 别用ref
  settimeout这样写：
    searchName (v) {
        let value = v.target.value
        setTimeout(() => {
            console.log(value)
        }, 500);
    }


2.时间转换
`${new Date(v.createdTime).getFullYear()}/${new Date(v.createdTime).getMonth()+1}/${new Date(v.createdTime).getDate()}`
同时有
  date.getFullYear();  // 获取完整的年份(4位,1970)
  date.getMonth();  // 获取月份(0-11,0代表1月,用的时候记得加上1)
  date.getDate();  // 获取日(1-31)
  date.getTime();  // 获取时间(从1970.1.1开始的毫秒数)
  date.getHours();  // 获取小时数(0-23)
  date.getMinutes();  // 获取分钟数(0-59)
  date.getSeconds();  // 获取秒数(0-59)


3.正则王
const regex = /.*?@.*?\.com$|\.cn$|\.org$|\.net$/;
regex.test( this.refs.mail.value)



4. react 神坑ref
获取值insight:this.summary.textAreaRef.value
得到值ref={el => this.summary = el}

5. antd table
<Table dataSource={this.state.userData} columns={columns} onRowClick={(v) => { this.choiceUser(v) }} pagination={this.state.pagination} onChange={(v) => this.handleTableChange(v)} />
  handleTableChange(v) {
        if(v.current!==this.state.pagination.current){
            ajax.get(`${apiConfig.getUserList}?page=${v.current}`).then((res) => {
                const userData=this.changeData(res.data.data.users);
                const pagination = this.state.pagination;
                pagination.current = v.current;
                this.setState({
                    userData: userData,
                    pagination: pagination
                });
            })
        }
        
    }

6.router4-antd
  <TabBar
      unselectedTintColor="#949494"
      tintColor="#33A3F4"
      barTintColor="white"
      hidden={this.state.hidden}
  >
      <TabBar.Item
          title="Assets"
          key="assets"
          icon={
              <i className='iconfont icon-assets'></i>
          }
          selectedIcon={
              <i className='iconfont icon-assets'></i>
          }
          selected={this.state.selectedTab === 'assets' || !this.state.selectedTab || this.state.selectedTab === 'assetsDetail' }
          onPress={() => {
              this.setState({
                  selectedTab: 'assets'
              });
              this.jumpTo('/assets');
          }}
      >
          <Route exact path='/' component={Assets}/>
          <Route exact path='/assets' component={Assets}/>
          <Route exact path='/assets/:level' component={AssetsList}/>
          <Route exact path='/allFunds/:id' component={AllFunds}/>
          <Route exact path='/assetsDetail/:id' component={AssetsDetail}/>

      </TabBar.Item>
      <TabBar.Item
          icon={
              <i className='iconfont icon-upcoming'></i>
          }
          selectedIcon={
              <i className='iconfont icon-upcoming'></i>
          }
          title="Upcoming"
          key="upcoming"
          selected={this.state.selectedTab === 'upcoming'}
          onPress={() => {
              this.setState({
                  selectedTab: 'upcoming'
              });
              this.jumpTo('/upcoming');
          }}
      >
          <Route path='/upcoming' component={Upcoming}/>
      </TabBar.Item>
      <TabBar.Item
          icon={
              <i className='iconfont icon-alerts'></i>
          }
          selectedIcon={ 
              <i className='iconfont icon-alerts'></i>
          }
          title="Alerts"
          key="alerts"
          selected={this.state.selectedTab === 'alerts' || this.state.selectedTab === 'alertDetail'}
          onPress={() => {
              this.setState({
                  selectedTab: 'alerts'
              });
              this.jumpTo('/alerts');
          }}
      >
          <Route path='/alerts' component={Alerts}/>
          {/* <Route exact path='/alertDetail/:alertId' component={AlertDetail}/> */}
      </TabBar.Item>
      <TabBar.Item
          icon={
              <i className='iconfont icon-task'></i>
          }
          selectedIcon={
              <i className='iconfont icon-task'></i>
          }
          title="Tasks"
          key="tasks"
          selected={this.state.selectedTab === 'tasks' || this.state.selectedTab === 'tasksDetail' || this.state.selectedTab === 'newTask'}
          onPress={() => {
              this.setState({
                  selectedTab: 'tasks'
              });
              this.jumpTo('/tasks');
          }}
      >
          <Route path='/tasks/:type?' component={Tasks}/>
          <Route exact path='/assetsDetail/:id' component={AssetsDetail}/>
          {/* <Route exact path='/alertDetail/:alertId' component={AlertDetail}/> */}
      </TabBar.Item>
      {/* <TabBar.Item
          icon={
              <i className='iconfont icon-search'></i>
          }
          selectedIcon={
              <i className='iconfont icon-search'></i>
          }
          title="Search"
          key="search"
          selected={this.state.selectedTab === 'search'}
          onPress={() => {
              this.setState({
                  selectedTab: 'search'
              });
              this.jumpTo('/search');
          }}
      >
          <Route path='/search' component={Search}/>
      </TabBar.Item> */}
  </TabBar>

7.图片大小自适应
  img{
      width: 100%;
      height: 36.15vw;
  }

8.li:before{
    content:'';
    display: inline-block;
    width: .65rem;
    height: .65rem;
    border-radius: 50%;
    background-color: #000;
    margin-right: 0.7rem;
}
li:hover::before{
    background-color: rgb(255, 117, 51);
}
9.react 滚动条触发修改样式
handleScroll(e){
		let scrollTop = e.srcElement.body.scrollTop;
		const line1=document.getElementsByClassName('line1')[0]
		if(scrollTop<200 &&scrollTop>=1){
			let he = 400-scrollTop;
			let fs = 50-(scrollTop/10);
			let ml= scrollTop*100/300;
			let op = 1-scrollTop/150;
			setTimeout(() =>{
				this.refs.lineo.style.height=`${he}px`;
				if(scrollTop>0){
					this.refs.lineo.style.fontSize=`${fs}px`;
					this.refs.ao.style.marginLeft=`${ml}%`;
					this.refs.ao.style.opacity=`${op}`;
				}

			}, 200);
		}
	}
	
10.react父组件向子组件传方法
父组件中
<ControlButton cancel={(v)=>this.cancelButtonList(v)} buttons={buttonList} />
其中buttonList为
const buttonList =taskType?[
    {name:'Add Comment',click: this.AddComment,css:'button-top'},
    {name:'New Task',click: this.NewTask,css:'button-bottom'}
]:[
    {name:'Add Comment',click: this.AddComment,css:'button-top'},
    {name:'Edit',click: this.Edit,css:null},
    {name:'Close the task',click: this.CloseTheTask,css:null},
    {name:'New Task',click: this.NewTask,css:'button-bottom'}
]

子组件中
{this.props.buttons.map((v,i)=>(
 <div key={i} className={`button-item ${v.css}`} onClick={()=>v.click()}>
    {v.name}
</div>
))}

11.react hover
onMouseOver={this.changeHover}
onMouseOut={this.changeHover}

changeHover = () => {
    this.setState(
      prevState => ({ hover: !prevState.hover })
    )
  }

12.图片的伸缩
实现图片两边的可舍弃但是高度不能舍弃
图片外面包一层定好min-height
.wrap{
  min-height:500px;
  img{
   .....
  }
}

13.react子向父传参
  子：
  hideMap=()=>{
     this.props.hideMap(false)
  }
   
   父：
   <子 hideMap={(data)=>this.hideMap(data)}/>
    hideMap = async (data) =>{
        await this.setState({
            toTop: data
        })
        setTimeout(() => {
            this.setState({
                showMap: data
            })
        }, 1000);
    }
   
14.浏览器离开事件
 window.onbeforeunload = function (e) {
    e = e || window.event;

    if (e) {
	debugger
	localStorage.setItem('testz', 'test2')
    }
};

15.ract路由传参
https://www.jianshu.com/p/8cf549616f86

16.禁止事件
window.addEventListener("keydown", (e) => {
    e = window.event || e;
    if (event.keyCode == 116 || e.ctrlKey   &&   e.keyCode==82) {
	e.preventDefault()
	return false;
    }
});

// document.oncontextmenu = function(){ return false;}

17.篡改localStorage使之可以监听同页面下的Storage变化
	var orignalSetItem = localStorage.setItem;
	localStorage.setItem = function (key, newValue) {
	    var setItemEvent = new Event("setItemEvent");
	    setItemEvent.key = key;
	    setItemEvent.newValue = newValue;
	    window.dispatchEvent(setItemEvent);
	    orignalSetItem.apply(this, arguments);
	}
	window.addEventListener("setItemEvent", (e) => {
	    if (e.key == 'auth') {
		console.log(e)
		this.setState({
		    auth: e.newValue
		})
	    }
	});
18.图片预加载
let imgArr = [
	    '../../images/Thought Leadership/Asset 1.png', '../../images/Thought Leadership/Asset 2.png',
	    '../../images/Thought Leadership/Asset 3.png','../../images/Thought Leadership/Asset 4.png',
	    '../../images/Thought Leadership/Asset 5.png','../../images/Thought Leadership/Asset 6.png',
	    '../../images/Thought Leadership/Asset 7.png','../../images/Thought Leadership/Asset 8.png'
	]
	let imgwrap=[]
	for (var i = 0; i<imgArr.length ; i++){
	    imgwrap[i] = new Image()
	    let src =  require('../../images/Thought Leadership/Asset ' + (i + 1) + '.png')
	    imgwrap[i].src = src
	}
19.得到css中的transform:
 var wd =  $('.rotator').css('transform').split(',')[4]
 
 
20.操作视频
this.video.pause()
        let intervalRwd = setInterval(()=>(this.video.currentTime -= .03), 30);

21.postmesshe
	window.parent.postMessage(JSON.stringify('/DataGx'), "*")

	window.onmessage = (e)=>{
            let data =JSON.parse(e.data)
            history.push(data)
        }
22.背景图片
    width: 100vw;
    height: 92vh;
    background: url('../../images/HZ/Home_bg2.png') no-repeat center center ;
    background-size: cover;
23.当react组件需要react url的参数
    import { withLastLocation } from 'react-router-last-location';
    export default withLastLocation(ChallengeSolutionResult)

24.qq浏览器软键盘问题
	if ((/Android/gi).test(navigator.userAgent)) {
        var winHeight = $(window).height(); //获取当前页面高度
        $(window).resize(function () {
            var thisHeight = $(this).height();
            if (winHeight - thisHeight > 50) {
                $('.wrap').css('transform', 'translate(0,-150px)');
            } else {
                $('.wrap').css('transform', 'translate(0,0)');
            }
        });
    }

