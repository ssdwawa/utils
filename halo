 1.函数中调用另一个函数的时候并不改变那个函数的作用域
   a(){
    print(value)
   }

   b(){
    var value = 'test'
    a()  //undefined
   }
 
 2.执行异步
 
    var xhr = new XMLHttpRequest();
	    xhr.open('POST', url, true);   //第三个参数决定是否采用异步的方式
	    xhr.send(data);
	    xhr.onreadystatechange = function(){
		if(xhr.readystate === 4 && xhr.status === 200){
			///xxxx
		}
    }
    
    上面是一个代码，浏览器在发起一个ajax请求，会单开一个线程去发起http请求，这样的话就能把这个耗时的过程单独去自己跑了，在这个线程的请求过程中，
    readystate 的值会有个变化的过程，每一次变化就触发一次onreadystatechange 函数，进行判断是否正确拿到返回结果。
 
   //最原始的写法-同步写法

   f1(); //耗时很长，严重堵塞
   f2(); //得等f1的执行结果
   f3(); //导致f3执行受到影响


   //改进版-异步写法
   function f1(callback){
     setTimeout(function () {
       // f1的任务代码
       callback(f1的结果);
     }, 1000);
   }

   f1(f2); //

   f3();


   // 高级一点用 webwoker

3.虚拟DOM概念
  3.1 什么是虚拟DOM？
      在React中，render执行的结果得到的并不是真正的DOM节点，结果仅仅是轻量级的JavaScript对象，我们称之为virtual DOM。
  3.2 虚拟DOM VS 直接操作原生DOM？
      如果没有 Virtual DOM，简单来说就是直接重置 innerHTML。这样操作，在一个大型列表所有数据都变了的情况下，还算是合理，
      但是，当只有一行数据发生变化时，它也需要重置整个 innerHTML，这时候显然就造成了大量浪费。     
      
      js 调用dom是dom给了js api,这个过程的开销很大，而用虚拟DOM完全在js引擎中。虚拟DOM进行频繁修改，然后一次性比较并修改真实DOM中需要改的部分（注意！）
      ，最后并在真实DOM中进行排版与重绘，减少过多DOM节点排版与重绘损耗     
      
      React.js 相对于直接操作原生DOM有很大的性能优势， 很大程度上都要归功于virtual DOM的batching 和diff。batching把所有的DOM操作搜集起来，一次性提交给真实的DOM。
      diff算法时间复杂度也从标准的的Diff算法的O(n^3)降到了O(n)。
      
      React 从来没有说过 “React 比原生操作 DOM 快”。React给我们的保证是，在不需要手动优化的情况下，它依然可以给我们提供过得去的性能。
      
4.diff 算法
      传统Diff算法需要找到两个树的最小更新方式，所以需要[两两]对比每个叶子节点是否相同，对比就需要O(n^2)次了，
      再加上更新（移动、创建、删除）时需要遍历一次，所以是O(n^3)。
      
      react 的吧每个层编号，按层比较，不一样直接替换
      
      
 5.promise
      理解一下promise
      var promise=new Promsie(function(resolve,rejec){
          if(/*异步执行成功*/){
              resolve(value);
          }else{
              reject(error);
          }
      })
      
     .then(function(){
       //回调执行成功之后的操作
       },function(){
       //回调执行失败之后的操作，可以没有
     });
     
     
     理解源码
 function Promise(exec) {
	var _this = this
	_this.value = undefined;
	_this.state = 'pending';
	_this.callBacks = []

	function resolve(data) {
		setTimeout(() => {
			_this.value = data;
			_this.state = 'resolve';
			_this.callBacks.forEach(element => {
				element(data)
			});
		}, 0);
	}
	exec(resolve)
}

Promise.prototype.then = function (exec) {
	var _this = this
	return new Promise(function (resolve) {
		if (_this.state == 'pending') {
			_this.callBacks.push(function (data) {
				var x = exec(data)
				if (x instanceof Promise) {
					x.then(resolve)
				}
			})
			return
		}

		exec(resolve)
	})
}

new Promise(
	function (resolve) {
		// 模拟异步请求
		setTimeout(() => {
			resolve(10)
		}, 1000);
	}
)
.then(function (a) {
	console.log(a)
	return new Promise(
		function (resolve) {
			// 模拟异步请求
			setTimeout(() => {
				resolve(15)
			}, 1000);
		}
	)
})
.then(function (e) {
	console.log(e)
})




//看着是resolve比then先执行，但是resolve中setTimeout了所以实际上是then中先push、resolve再遍历
//状态机制是为了判断是否是异步
//链式Promise机制在then中return Promise
//then的作用是往云上加功能，而resolve则是调用云上的功能实现了同步
//x.then(resolve)是迷点 记住它，本质是在return的promise中再then拿结果

promise.all

// 写法1
function fun1(num = -1) {
 
    // 在fun1中返回一个promise对象
    return new Promise(function(resolve, reject) {
        // 为了体现是异步接口，这里使用一个定时器，延迟3秒
        setTimeout(resolve, 3000, 'fun1');
    })
};
 
function fun2(num2 = 200) {
    // 在fun2中也返回一个promise对象
    return new Promise(function(resolve, reject) {
        // 为了和fun1区分开来，fun2延迟1秒
        setTimeout(resolve, 1000, 'fun2');
    })
}
 
// 由于fun1和fun2是方法，所以使用fun1()执行该方法
Promise.all([fun1(), fun2()]).then(function(result) {
    console.log(result) // 输入应该为 ['fun1','fun2']
    
源码手写
Promise.all = arr => {
	let aResult = []; //用于存放每次执行后返回结果
	return new Promise(function (resolve, reject) {
		let i = 0;
		next(); //开始逐次执行数组中的函数
		function next() {
			arr[i].then(function (res) {
				aResult.push(res); //执行后返回的结果放入数组中
				i++;
				if (i == arr.length) { //如果函数数组中的函数都执行完，便把结果数组传给then
					resolve(aResult);
				} else {
					next();
				}
			})
		}
	})
}

