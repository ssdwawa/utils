import React from 'react';
import { Router, Route, Switch } from 'react-router-dom';
import { Redirect } from 'react-router'
import history from '../utils/history'
import { Provider } from 'mobx-react';
import { RouterStore, syncHistoryWithStore } from 'mobx-react-router';
import store from '../stores/index';

import IndexPage from '../pages/index/index'

const routerStore = new RouterStore();
const bindhistory = syncHistoryWithStore(history, routerStore);
store.router = routerStore
class Routes extends React.Component {
    constructor(props) {
        super(props)
    };

    render() {
        return (
            <div>
                <Provider {...store}>
                    <Router history={bindhistory}>
                        <div>
                            <Route path="/" component={IndexPage} />
                        </div>
                    </Router>
                </Provider>,
            </div>
        )
    }
}

export default Routes


stors
  import TestStore from './TestStore';

  export default {
      testStore : new TestStore()
  }
  
  
  
  import { observable, action, computed } from 'mobx';
  import { data } from '../mock/data';


  const dataList = data.map((z) => {
      return {
          checked: true,
          ...z
      }
  });

  export default class AppState {

      @observable list = dataList;
      @observable checkedAll = true;

      @action removeItem = (id) => {
          this.list.forEach((item, i) => {
              if (item.id === id) {
                  this.list.splice(i, 1);
              }
          });
      };

      @action add = (id) => {
          this.list.forEach(item => item.id === id && item.buyNum++);
      };

      @action sub = (id) => {
          this.list.forEach(item => (item.id === id && item.buyNum > 0) && item.buyNum--);
      };

      @action onChecked = (id) => {
          this.list.forEach(item => {
              if (item.id === id) {
                  item.checked ? this.checkedAll = false : null;
                  item.checked = !item.checked;
              }
          });
          !this.list.some((item) => item.checked === false) ? this.checkedAll = true : null;
      };

      @action onCheckedAll = () => {
          this.checkedAll = !this.checkedAll;
          this.checkedAll ? this.list.forEach(item => item.checked = true) : this.list.forEach(item => item.checked = false);
      };

      @computed get totalPrice() {
          let total = 0;
          this.list.forEach((item, i) => {
              if (item.checked) {
                  total += this.list[i].buyNum * this.list[i].price;
              }
          });
          return total;
      }

  }
  
  
  page
    @inject('testStore')
    @observer
    class IndexPage extends React.Component<indexProps, {}> {
  
  
  
